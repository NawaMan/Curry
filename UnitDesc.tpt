// @RegParserTypePackage: { function ():net.nawaman.regparser.typepackage.PTypePackage }

// TypePackage *************************************************************************************

// TypeKinds *****************************************************************************

// Error +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Error:

#Variables:
	var Checker;
	var ErrMessage;
	var IsFatal;

#Constructor:
	// @Java:
	import net.nawaman.regparser.*;
    import net.nawaman.regparser.types.*;
	import net.nawaman.regparser.typepackage.*;
	
	String Name    = (String)$Spec.getValue("Name");
	String Checker = (String)$Spec.getValue("Checker");
	String ErrMsg  = (String)$Spec.getValue("ErrMessage");
	String IsFatal = (String)$Spec.getValue("IsFatal");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of an error parser type cannot be null. ("+Name+")");
	if(ErrMsg  == null) throw new NullPointerException("Error message of an error parser type cannot be null. ("+Name+")");
	if(IsFatal != null) IsFatal = IsFatal.trim();
	return new ErrorParserType(Name, RegParser.compileRegParser($TPackage, Checker), ErrMsg.trim(), "true".equals(IsFatal));

#end def_kind;

// Simple ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Simple:

#Variables:
	var Checker;
	var Verifier;
	var Compiler;

#Constructor:
	// @Java: 
	import net.nawaman.regparser.*;
	import net.nawaman.regparser.typepackage.*;
	import net.nawaman.script.*;
	
	String Name     = (String)$Spec.getValue("Name");
	String Checker  = (String)$Spec.getValue("Checker");
	String Verifier = (String)$Spec.getValue("Verifier");
	String Compiler = (String)$Spec.getValue("Compiler");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of a simple parser type cannot be null. ("+Name+")");
	
	net.nawaman.regparser.RegParser             ParserCK = null;
	net.nawaman.regparser.types.CheckerProvider ParserGC = null;
	Object CkEn = null;	try { CkEn = net.nawaman.script.ScriptManager.GetEngineFromCode(Checker); } catch(RuntimeException RTE) {} 
	if(CkEn == null) ParserCK = net.nawaman.regparser.RegParser.compileRegParser($TPackage, Checker);
	else             ParserGC = new net.nawaman.regparser.typepackage.TPGetChecker($TPackage, Name, Checker);
	
	if((ParserCK == null) && (ParserGC == null)) throw new NullPointerException("Checker is not a valid RegParser. ("+Name+")");
	
	net.nawaman.regparser.typepackage.TPVerifier TheVerifier = (Verifier == null)?null:new net.nawaman.regparser.typepackage.TPVerifier($TPackage, Name, Verifier);
	net.nawaman.regparser.typepackage.TPCompiler TheCompiler = (Compiler == null)?null:new net.nawaman.regparser.typepackage.TPCompiler($TPackage, Name, Compiler);
	
	if(ParserCK != null) {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.SimpleParserType    (Name, ParserCK);
		else return new net.nawaman.regparser.types.ComposableParserType(Name, ParserCK, TheVerifier, TheCompiler);
	} else {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.SimpleParserType    (Name, ParserGC);
		else return new net.nawaman.regparser.types.ComposableParserType(Name, ParserGC, TheVerifier, TheCompiler);
	}

#end def_kind;



// Types *********************************************************************************

// EOL -------------------------------------------------------------------------
#def Simple parser EOL:

#Checker:
	!Spaces_Op!*[:NewLine:]

#end def parser;

// Ignored ---------------------------------------------------------------------
#def Simple parser Ignored:

#Checker:
	(
		[:WhiteSpace:]
		||
		[:NewLine:]
		||
		[:/:][:/:][^[:NewLine:]]*[:NewLine:]
		||
		[:(:][:*:](^[:*:][:):])*[:*:][:):]
	)

#end def parser;

// Spaces_Op -------------------------------------------------------------------
#def Simple parser Spaces_Op:

#Checker:
	// This is non-newline whitespace
	[[: :][:Tab:]]*

#end def parser;

// Spaces_Rq -------------------------------------------------------------------
#def Simple parser Spaces_Rq:

#Checker:
	// This is non-newline whitespace
	[[: :][:Tab:]]+

#end def parser;

// Identifier ------------------------------------------------------------------
#def Simple parser Identifier:

#Checker:
	[a-zA-Z][a-zA-Z0-9]*

#end def parser;

// CompileData -----------------------------------------------------------------
#def Simple parser CompileData:

#Checker:
	($CompileData:~[^.]{0}~)
	[:NewLine:]
	[:/:][:*:]*[:NewLine:]
	($StartCStr:~[^.]{0}~)
	##:COMPILED::BASE64[: :][:{:][:NewLine:]
	($BASE64:~([a-zA-Z0-9[:+:][:/:][:=:]]*[:NewLine:])*~)
	[:}:]($EndCStr:~[^.]{0}~)[:NewLine:]
	##:HASHES:0x[:Blank:]*($HASH1:~ [A-F0-9]*~)[:-:]0x[:Blank:]*($HASH2:~ [A-F0-9]*~)[:;:][:NewLine:]
	##:COUNTS:0x[:Blank:]*($COUNT1:~[A-F0-9]*~)[:-:]0x[:Blank:]*($COUNT2:~[A-F0-9]*~)[:;:][:NewLine:]
	[:*:]*[:/:]

#end def parser;

// WildCardPath ----------------------------------------------------------------
#def Simple parser WildCardPath:

#Checker:
	(
		   ($QuestionMark:~  [:?:]                                                          ~)
		|| ($Tilde:~         [:~:]                                                          ~)
		|| ($DoubleAsterisk:~[:*:][:*:]                                                     ~)
		|| ($Asterisk:~      [:*:][:*:]{0}                                                  ~)
		|| (#Replace:~       [:[:][:Blank:]*[:#:][:Blank:]*($Number:~[0-9]+~)[:Blank:]*[:]:]~)
		|| ($Others[]:~      [:Word:]                                                       ~)
		|| ($Puntuation:~    [^[:;:]]                                                       ~)
	)+

#Compiler:
	// @RegParser(Java):
	import net.nawaman.regparser.*;
	StringBuilder SB = new StringBuilder();
	
	if($Result == null) return $Text;
	
	int Count = $Result.entryCount();
	for(int i = 0; i < Count; i++) {
		char Kind = ~~[i]~~.charAt(1);	// The 0th is '$'
		switch(Kind) {
			case 'Q': SB.append(".");                                                         break;
			case 'O': SB.append($$[i]$$);                                                     break;
			case 'P': SB.append("[:").append($$[i]$$).append(":]");                           break;
			case 'D': SB.append(".*");                   if(i != (Count - 1)) SB.append("*"); break;
			case 'T': SB.append("[^[:/:][:\\:]     ]*"); if(i != (Count - 1)) SB.append("*"); break;
			case 'A': SB.append("[^[:/:][:\\:][:.:]]*"); if(i != (Count - 1)) SB.append("*"); break;
			case 'R': SB.append("%").append(##[i]##->$$$Number$$).append("$s");
		}
	}
	SB.append(".{0}");
	
	return SB.toString();

#end def parser;

// UnitDescFile ----------------------------------------------------------------
#def Simple parser UnitDescFile:

#Checker:
	($Code:~
		(^!CompileData!)*
		~:~
		// This part is to be sure that this is a right kind of file
		(^##|[:NewLine:])* ##:[uU][nN][iI][tT] !Spaces_Op! [:;:] (^##|[:NewLine:])* ##[:NewLine:]
	
		!Ignored!*
	
		(#Define*:~
			(
				##:Define !Spaces_Rq! # !Spaces_Op! ($Number:~[0-9]+~) !Spaces_Op! : !Spaces_Op! (#Text:!Literal_String!)
				!End_Semicolon! [:WhiteSpace:]*
				||
				($ERROR_Invalid_define_text:~([:#:]#:Includeds){0}[^;]+~)
			)
			!Ignored!*
		~)*
	
		##:Includeds !Spaces_Op! [:{:] !EOL!
		(
			!Ignored!*
			($IncludedPath:~
				[^;[:}:]]+!End_Semicolon! !Ignored!*
				~:~
				(
					(#IncludedPath:!WildCardPath!)!End_Semicolon!
					||
					($ERROR_Invalid_include_path:~.*~)
				)		
			~)
		)*
		[:}:]

	~)
	
	(
		($EndText:~[^.]{0}~)
		(#CompileData*:!CompileData!)
	)?

#Compiler:
	// @RegParser(Java):
	import java.util.Vector;
	import net.nawaman.script.Tools;	
	
	// Checks if the UnitDescription file is up-to-date ----------------------------------------------------------------
	boolean IsUpToDate = false;
	
	if($$$CompileData$$ != null) {
		int TextLength_0 = ::$EndText::;
		int TextLength_1 = Integer.parseInt($$$COUNT1$$, 16);
		
		if((TextLength_0 == TextLength_1)) {
			int CStrLength_0 = ::$EndCStr:: - ::$StartCStr:: + 1;	// +1 is for '\n' See net/nawaman/script/Tools.java for <Tools:415>
			int CStrLength_1 = Integer.parseInt($$$COUNT2$$, 16);
			
			if(CStrLength_0 == CStrLength_1) {
				int TextHash_0 = Integer.parseInt(Tools.GetHashText($Text.substring(0, TextLength_0)).trim(), 16);
				int TextHash_1 = Integer.parseInt($$$HASH1$$, 16);
				
				if(TextHash_0 == TextHash_1) {
					int CStrHash_0 = Integer.parseInt(Tools.GetHashText($Text.substring(::$StartCStr::, ::$EndCStr::)).trim(), 16);
					int CStrHash_1 = Integer.parseInt($$$HASH2$$, 16);
					
					if(CStrHash_0 == CStrHash_1) IsUpToDate = true;
				}
			}
		}
	}
	
	// The code --------------------------------------------------------------------------------------------------------
	
	String Code = $Text;			
	if($$$EndText$$ != null) Code = $Text.substring(0, ::$EndText::);
	
	// Process the code itself -----------------------------------------------------------------------------------------
	String[] DefNames     = $$$Number*$$;
	Object[] DefTexts     = @@#Text*@@;
	Object[] PathPatterns = @@#IncludedPath*@@;
	
	// Ensure the define number is wel-formed
	for(int i = 1; i <= ((DefNames == null) ? 0 : DefNames.length); i++) {
		int Num = Integer.parseInt(DefNames[i - 1]);
		if(Num == i) continue;
		
		System.err.println("Invalid define numbering. It must starts from one and increase by one.");
		return null;
	}
	
	Vector<String> Patterns = new Vector<String>();
	// Format the pattern
	if(PathPatterns != null) {
		for(int p = 0; p < PathPatterns.length; p++) {
			Object PObj = PathPatterns[p];
			if(PObj == null) continue;
		
			String Pattern = PObj.toString();
			if(Pattern.length() == 0) continue;
		
			Patterns.add(String.format(Pattern, (Object[])DefTexts));
		}
	}
	
	return new Object[] { Code, Patterns.toArray(new String[Patterns.size()]), IsUpToDate, $$$BASE64$$, $$$HASH1$$};

#end def parser;

// End_Semicolon ---------------------------------------------------------------
#def Simple parser End_Semicolon:

#Checker:
	(
		!Spaces_Op!* [:;:] !Spaces_Op!* [:NewLine:] !Spaces_Op!*
		||
		($ERROR_Missing_semicolon:~[^.]{0}~)
	)

#end def parser;

// Literal_String --------------------------------------------------------------
#def Simple parser Literal_String:

#Checker:
	(
		[:":](($Chars[]:~[^[:":][:NewLine:]]~)|(#EscapeChr:!Literal_Char_Escape!))*
		([:":] || ($ERROR_Missing_the_closing_quatation_mark:~[^.]{0}~))
		|
		[:`:](($Chars[]:~[^[:`:][:NewLine:]]~)|(#EscapeChr:!Literal_Char_Escape!))*
		([:`:] || ($ERROR_Missing_the_closing_quatation_mark:~[^.]{0}~))
	)

#Compiler:
	// @RegParser(Java):
	
	// Empty String
	if($Result == null) return "";
	
	// Check for error
	if(($Result != null) && !$Result.ensureNoError($TPackage, $CContext)) return null;
	
	// Short string
	StringBuffer SB = new StringBuffer();
	int Count = $Result.entryCount();
	for(int i = 0; i < Count; i++) {
		String Name = $Result.nameOf(i);
		if("$Chars[]".equals(Name)) {
			SB.append($$[i]$$			);

		} else if("#EscapeChr".equals(Name)) {
			SB.append(@@[i]@@);
		}
	}

	return SB.toString();

#end def parser;

// Literal_Char_Escape ---------------------------------------------------------
#def Simple parser Literal_Char_Escape:

#Checker:
	[:\:](
		0(
			[0-3][0-7][0-7]
			|| (
				[0-7][0-7]
				||
				[0-7]
			)
		)
		|
		[xX][0-9a-fA-F]{2		}
		|
		[uU][0-9a-fA-F]{4}
		|
		[[:\:][:":][:':]tnrbf]
		||
		($ERROR_Invalid_Escape_Character:~.~)
	)

#Compiler:
	// @RegParser(Java):
	
	// Check for error
	if(($Result != null) && !$Result.ensureNoError($TPackage, $CContext)) return null;
	
	char F = $Text.toLowerCase().charAt(1);
	switch(F) {
		case  '0': return (char)Integer.parseInt($Text.substring(2),  8);
		case  'x': return (char)Integer.parseInt($Text.substring(2), 16);
		case  'u': return (char)Integer.parseInt($Text.substring(2), 16);
		case '\\': return '\\';
		case '\"': return '\"';
		case '\'': return '\'';
		case  't': return '\t';
		case  'n': return '\n';
		case  'r': return '\r';
		case  'b': return '\b';
		case  'f': return '\f';
		default: {
			String Location = ($Result == null)?"":"near " + $Result.locationOf(0);
			$CContext.reportError("Invalid Escape Character (" + $Text + ") <Util_Literal:28> "+Location, null);
			return null;
		}
	}

#end def parser;



// More Datas **************************************************************************

#def_data:

#Names:
	//These data list are for reference only
	data: ToFreeze = true:java.lang.Boolean;


#Bytes:
	ACED0005757200175B4C6A6176612E696F2E53657269616C697A61626C653BAED009AC53D7ED4902
	0000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D1030002
	46000A6C6F6164466163746F724900097468726573686F6C6478703F4000000000000C7708000000
	1000000001740008546F467265657A65737200116A6176612E6C616E672E426F6F6C65616ECD2072
	80D59CFAEE0200015A000576616C756578700178

#end def_data;

